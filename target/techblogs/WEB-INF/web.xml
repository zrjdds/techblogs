<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">
  <display-name>Archetype Created Web Application</display-name>
  

   <!-- 在Spring框架中是如何解决从页面传来的字符串的编码问题的呢？
    下面我们来看看Spring框架给我们提供过滤器CharacterEncodingFilter  
     这个过滤器就是针对于每次浏览器请求进行过滤的，然后再其之上添加了父类没有的功能即处理字符编码。  
      其中encoding用来设置编码格式，forceEncoding用来设置是否理会 request.getCharacterEncoding()方法，设置为true则强制覆盖之前的编码格式。-->  
  <filter>  
    <filter-name>characterEncodingFilter</filter-name>  
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>  
    <init-param>  
      <param-name>encoding</param-name>  
      <param-value>UTF-8</param-value>  
    </init-param>  
    <init-param>  
      <param-name>forceEncoding</param-name>  
      <param-value>true</param-value>  
    </init-param>  
  </filter>  
  <filter-mapping>  
    <filter-name>characterEncodingFilter</filter-name>  
    <url-pattern>/*</url-pattern>  
  </filter-mapping> 
  
  <context-param>    
    <param-name>log4jConfigLocation</param-name>    
    <param-value>classpath:log4j.properties</param-value>    
  </context-param>    
        
  <context-param>    
     <param-name>log4jRefreshInterval</param-name>    
     <param-value>60000</param-value>    
  </context-param>    
  
  <context-param>
     <param-name>contextConfigLocation</param-name>
     <param-value>classpath*:spring-mvc.xml</param-value>
  </context-param>
  
    
  <!-- 要放在SpringMVC的ContextLoaderListener之前-->
  <listener>    
     <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>    
  </listener>    
 
  
  <!-- Spring监听 -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <listener>
    <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
  </listener>
  
  <!--如果你的DispatcherServlet拦截"/"，为了实现REST风格，拦截了所有的请求，那么同时对*.js,*.jpg等静态文件的访问也就被拦截了。-->  
  <!--方案一：激活Tomcat的defaultServlet来处理静态文件-->  
  <!--要写在DispatcherServlet的前面， 让 defaultServlet先拦截请求，这样请求就不会进入Spring了，我想性能是最好的吧。-->  
  <servlet-mapping>  
     <servlet-name>default</servlet-name>  
     <url-pattern>*.css</url-pattern>  
  </servlet-mapping>  
  <servlet-mapping>  
     <servlet-name>default</servlet-name>  
     <url-pattern>*.swf</url-pattern>  
  </servlet-mapping>  
  <servlet-mapping>  
     <servlet-name>default</servlet-name>  
     <url-pattern>*.gif</url-pattern>  
  </servlet-mapping>  
  <servlet-mapping>  
     <servlet-name>default</servlet-name>  
     <url-pattern>*.jpg</url-pattern>  
  </servlet-mapping>  
  <servlet-mapping>  
     <servlet-name>default</servlet-name>  
     <url-pattern>*.png</url-pattern>  
  </servlet-mapping>  
  <servlet-mapping>  
     <servlet-name>default</servlet-name>  
     <url-pattern>*.js</url-pattern>  
  </servlet-mapping>  
  <servlet-mapping>  
     <servlet-name>default</servlet-name>  
     <url-pattern>*.html</url-pattern>  
  </servlet-mapping>  
  <servlet-mapping>  
     <servlet-name>default</servlet-name>  
     <url-pattern>*.xml</url-pattern>  
  </servlet-mapping>  
  <servlet-mapping>  
     <servlet-name>default</servlet-name>  
     <url-pattern>*.json</url-pattern>  
  </servlet-mapping>  
  <servlet-mapping>  
     <servlet-name>default</servlet-name>  
     <url-pattern>*.map</url-pattern>  
  </servlet-mapping>  
  
  <!-- Spring MVC配置 -->
  <servlet>
    <servlet-name>DispatcherServlet</servlet-name>
    <!--在DispatcherServlet的初始化过程中，框架会在web应用的 WEB-INF文件夹下寻找名为[servlet-name]-servlet.xml 的配置文件，生成文件中定义的bean。-->  
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath*:spring-mvc.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
    <async-supported>true</async-supported>
  </servlet>
  
  <servlet-mapping>
  
    <!--这个Servlet的名字是dispatcher，可以有多个DispatcherServlet，是通过名字来区分的。每一个DispatcherServlet有自己的WebApplicationContext上下文对象。同时保存的ServletContext中和Request对象中.-->  
    <!--ApplicationContext是Spring的核心，Context我们通常解释为上下文环境，我想用“容器”来表述它更容易理解一些，ApplicationContext则是“应用的容器”了:P，Spring把Bean放在这个容器中，在需要的时候，用getBean方法取出-->  
    
    <servlet-name>DispatcherServlet</servlet-name>
    
    <!--Servlet拦截匹配规则可以自已定义，当映射为@RequestMapping("/user/add")时，为例,拦截哪种URL合适？-->  
    <!--1、拦截*.do、*.htm， 例如：/user/add.do,这是最传统的方式，最简单也最实用。不会导致静态文件（jpg,js,css）被拦截。-->  
    <!--2、拦截/，例如：/user/add,可以实现现在很流行的REST风格。很多互联网类型的应用很喜欢这种风格的URL。弊端：会导致静态文件（jpg,js,css）被拦截后不能正常显示。 -->  
    <url-pattern>/</url-pattern>
    
  </servlet-mapping>
  
  <!--指定欢迎页面-->  
  <welcome-file-list>
    <welcome-file>/index.jsp</welcome-file>
  </welcome-file-list>
  
  <session-config>
  	<!--会话超时配置，单位分钟-->  
    <session-timeout>15</session-timeout>
  </session-config>
  
</web-app>